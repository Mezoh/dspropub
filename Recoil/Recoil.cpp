#include "Recoil.h"
#include "Settings.h"
#include "Utils.h"
#include "skCrypter.h"
#include "Globals.h"
#include <Windows.h> 
#include <Chrono> 
#include <Thread>
#include <fstream>
#include <sstream>
#include <iostream>
#include "xorstr.hpp"
#include "lazy_importer.hpp"
#include "ra.h"



namespace r012401
{
	
	std::array<weapon_info, WEAPON_MAX> weapons;
	using namespace std::chrono;
	bool r_chks5891m();
	int g_g_vls210452();
	int g_kbds96438();
	void init();

	const std::vector<std::vector<std::array<double, 2>>>rt123589120 = {
		/* None */		{ { 0.0 } },

		/* AK-47 */	
						{ {0.0, -756.9623978666666},
						{108.37226786666665, -771.3674654666667},
						{217.78687979999998, -771.0325340666666},
						{284.5696529333334, -757.3787990666667},
						{360.5484554666666, -779.1419642},
						{425.28274926666666, -742.9361815999999},
						{446.2275284666666, -749.8426749333335},
						{448.19554379999994, -743.6895258},
						{504.74933093333334, -718.6286777333333},
						{504.3828844666667, -748.6809759333333},
						{483.49342426666664, -761.1203750666666},
						{495.7061831333333, -739.0343481333334},
						{466.98422306666663, -726.1262462},
						{496.4709264, -730.1729148666667},
						{535.4440000666667, -761.3621023333333},
						{486.13532560000004, -719.4463931333333},
						{459.04007939999997, -761.2062033333333},
						{530.5135684666667, -770.5547790666667},
						{508.5566192, -749.3431276},
						{502.31294806666665, -750.4612419333333},
						{491.4234867333334, -781.7218412},
						{524.6293032, -751.8760672666667},
						{508.77353673333334, -772.1365672},
						{476.89437046666666, -741.5917622666668},
						{520.7345103333333, -753.6938831333333},
						{506.4078951333333, -766.1939655333334},
						{520.9634974666667, -751.0130908666667},
						{509.7327346666667, -744.9085554},
						{520.9634974666667, -751.0130908666667},
						{520.7345103333333, -753.6938831333333}},

		/* LR-300 */	{ {0.0, -688.1737242666666},
						{18.6354624, -636.233877},
						{-82.88663693333334, -624.6762292},
						{-81.76181726666667, -650.4206859999999},
						{32.0940722, -659.3860519333333},
						{36.110566866666666, -632.1520053333334},
						{108.92411680000001, -652.6709958666667},
						{-60.7291982, -630.4159945333333},
						{54.4469714, -610.2212068666666},
						{-97.92334693333333, -668.8368839999999},
						{21.649844999999996, -615.9371682666666},
						{-42.4779514, -632.9432346666667},
						{-30.364431466666662, -614.4764114000001},
						{21.905653466666664, -605.9877946666667},
						{-66.1625298, -571.9273834666667},
						{-72.60568459999999, -598.7691680666667},
						{14.2712962, -605.6159839333334},
						{-21.971365733333332, -589.2724044666667},
						{28.960334666666665, -638.351086},
						{-32.630163599999996, -660.2393056},
						{-71.42319906666667, -620.3398901333333},
						{-5.964394, -580.3020095333334},
						{-15.280448866666665, -598.0104596},
						{-17.872730733333334, -632.4001026666667},
						{18.463805866666668, -601.1586136},
						{-30.802289733333332, -644.3510182666666},
						{-11.304856733333333, -602.1925759999999},
						{89.33649706666665, -668.5056405333332},
						{26.516240666666665, -644.1025856666668} },

		/* M249 */		{{0.0, -499.5473333333333},
						{132.01125, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{241.39199999999997, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333},
						{0.0, -499.5473333333333}},

		/* HMLMG */		{ {0.0, -469.3733333333333},
						{-130.75400000000002, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333},
						{-244.74466666666666, -469.3733333333333}},

		/* MP5 */		{ {42.0293646, -352.85006226666667},
						{-33.37512613333333, -312.3169928},
						{9.328795000000001, -319.87591506666666},
						{-4.598182333333333, -285.4809077333333},
						{-2.6643641999999996, -358.9294527333333},
						{32.2177856, -341.3071662},
						{-15.401144866666666, -266.2741509333334},
						{11.505010933333333, -373.02372813333335},
						{-1.3303381333333335, -311.81141066666663},
						{-3.1525124666666664, -297.88543913333336},
						{47.20990513333333, -325.4792268666667},
						{-5.046433866666666, -350.87366526666665},
						{32.08468473333333, -288.488585},
						{-90.40230980000001, -348.3071989333333},
						{0.095551, -281.78425746666665},
						{6.173265133333333, -348.04904360000006},
						{33.25543593333334, -285.54695526666666},
						{66.9390074, -299.40687926666664},
						{-27.713142666666666, -358.49327079999995},
						{2.2885302666666667, -295.5352198},
						{30.746970733333335, -385.87718160000003},
						{-36.43577553333333, -323.7043251333333},
						{56.86524986666667, -368.62536473333336},
						{-12.8219384, -375.52682906666666},
						{-28.669658466666668, -294.0141149333333},
						{45.68980606666667, -351.2216720666667},
						{65.84369120000001, -348.6696222},
						{-51.13252513333334, -405.4349626},
						{-71.91805266666667, -320.73218613333336},
						{11.491600266666667, -31.90967553333333} },

		/* Thompson */	{ {-38.35886513333333, -228.19422766666668},
						{2.9121262666666667, -226.84075613333334},
						{3.4572698666666666, -228.93248486666667},
						{21.733661666666663, -231.78493366666666},
						{34.892878333333336, -219.80686146666667},
						{-29.543028133333333, -221.4198294},
						{30.142484933333332, -226.36635379999998},
						{12.4286706, -212.0974044666667},
						{59.833365666666666, -212.8061582},
						{11.618331066666665, -224.44192313333332},
						{-27.712472133333332, -222.89399693333334},
						{8.566063333333334, -213.44115326666665},
						{27.630667066666668, -216.9570948},
						{-41.34005633333333, -221.98140106666668},
						{9.442450400000002, -222.06521773333333},
						{-39.34220226666667, -232.49905166666665},
						{-90.11196886666667, -221.6525044666667},
						{-17.797966266666666, -227.1408198},
						{14.208601333333332, -216.93027346666668},
						{14.208601333333332, -216.93027346666668}},

		/* Custom */	{ {-38.3592004, -228.19422766666668},
						{2.911791, -226.84042086666668},
						{3.4572698666666666, -228.93248486666667},
						{21.733661666666663, -231.7845984},
						{34.892878333333336, -219.8065262},
						{-29.543028133333333, -221.4198294},
						{30.142484933333332, -226.36635379999998},
						{12.4286706, -212.0974044666667},
						{59.83370093333334, -212.8061582},
						{11.617995800000001, -224.44225840000001},
						{-27.712472133333332, -222.89433219999998},
						{8.566398600000001, -213.44115326666665},
						{27.6303318, -216.9570948},
						{-41.34005633333333, -221.98140106666668},
						{9.442450400000002, -222.06521773333333},
						{-39.341867, -232.4987164},
						{-90.11196886666667, -221.6521692},
						{-17.797966266666666, -227.1408198},
						{1.4208601333333333, -216.92993819999998},
						{4.750393399999999, -184.87945066666668},
						{-3.3214868666666666, -185.09368606666666},
						{14.7772136, -193.68154173333335},
						{-14.479161533333334, -184.25618993333333} },

		/* Semi */		{ {0.0, -500.3733333333333} },

		/* Python */	{ {0.0, -1944.5466666666666},
						{0.0, -1944.5466666666666},
						{0.0, -1944.5466666666666},
						{0.0, -1944.5466666666666},
						{0.0, -1944.5466666666666},
						{0.0, -1944.5466666666666} },

		/* M92 */		{ {0.0, -1056.09 },
						{0.0, -1056.09},
						{0.0, -1056.09},
						{0.0, -1056.09}}

	};
	const std::array<double, WEAPON_MAX> weapon_delays = {
		/* None */		0.0,
		/* AK-47 */		133.33,
		/* LR-300 */	120.0,
		/* M249 */		100.0,
		/* HMLMG */		100.0,
		/* MP5 */		89.0,
		/* Thompson */	113.0,
		/* Custom */	90.0,
		/* Semi */		150.0,
		/* Python */	135.0,
		/* M92 */		125.0
	};

	const std::array<double, WEAPON_MAX> weapon_hipfire = {
		/* None */		0.0,
		/* AK-47 */		0.8,
		/* LR-300 */	0.8,
		/* M249 */		1.2,
		/* HMLMG */		1.2,
		/* MP5 */		1.25,
		/* Thompson */	1.42,
		/* Custom */	1.54,
		/* Semi */		1.0,
		/* Python */	1.6,
		/* M92 */		1.42
	};

	const std::array<double, WEAPON_MAX> crouch_delays = {
		/* None */		0.0,
		/* AK-47 */		0.0,
		/* LR-300 */	0.0,
		/* M249 */		0.0,
		/* HMLMG */		0.0,
		/* MP5 */		0.0,
		/* Thompson */	0.0,
		/* Custom */	0.0,
		/* Python */	0.0,
		/* Semi */		0.0,
		/* M92 */		0.0
	};

	const std::array<double, WEAPON_MAX> updated_delays = {
		/* None */		0.0,
		/* AK-47 */		100.0,
		/* LR-300 */	100.0,
		/* M249 */		100.0,
		/* HMLMG */		100.0,
		/* MP5 */		65.0,
		/* Thompson */	90.0,
		/* Custom */	90.0,
		/* Semi */		60.0,
		/* Python */	50.0,
		/* M92 */		60.0
	};
	const std::array<double, WEAPON_MAX> movement_standing_multipliers = {
		/* None */		0.0,
		/* AK-47 */		1.20,
		/* LR-300 */	1.17,
		/* M249 */		2.20,
		/* HMLMG */		2.20,
		/* MP5 */		1.17,
		/* Thompson */	1.17,
		/* Custom */	1.17,
		/* Semi */		1.45,
		/* Python */	1.0,
		/* M92 */	1.45
	};

	const std::array<double, WEAPON_MAX> movement_crouch_multipliers = {
		/* None */		0.0,
		/* AK-47 */		1.158,
		/* LR-300 */	1.15,
		/* M249 */		1.73,
		/* HMLMG */		1.75,
		/* MP5 */		1.1,
		/* Thompson */	1.15,
		/* Custom */	1.15,
		/* Semi */	1.3,
		/* Python */	1.0,
		/* M92 */	1.3
	};

	const std::array<double, WEAPON_MAX> movement_hipfire_standing_multipliers = {
		/* None */		0.0,
		/* AK-47 */		0.96,
		/* LR-300 */	0.96,
		/* M249 */		2.65,
		/* HMLMG */		5.0,
		/* MP5 */		1.4,
		/* Thompson */	1.68,
		/* Custom */	1.72,
		/* Semi */	1.4,
		/* Python */	1.6,
		/* M92 */	2.5
	};

	const std::array<double, WEAPON_MAX> movement_hipfire_crouch_multipliers = {
		/* None */		0.0,
		/* AK-47 */		0.94,
		/* LR-300 */	0.92,
		/* M249 */		2.15,
		/* HMLMG */		2.16,
		/* MP5 */		1.35,
		/* Thompson */	1.65,
		/* Custom */	1.71,
		/* Semi */	1.3,
		/* Python */	1.6,
		/* M92 */	1.3
	};

	const std::array<double, WEAPON_MAX> crouch_multipliers = {
		/* None */		0.0,
		/* AK-47 */		0.57,
		/* LR-300 */	0.57,
		/* M249 */		0.87,
		/* HMLMG */		0.87,
		/* MP5 */		0.57,
		/* Thompson */	0.57,
		/* Custom */	0.57,
		/* Semi */	0.57,
		/* Python */	0.57,
		/* M92 */	0.57
	};

	const std::vector<std::vector<double>> control_times = {
		{ 0 },
						{ {121.961516,92.633356,138.606013,113.378747,66.251547,66.295303,75.932732,85.055126,89.202546,86.680192,78.821495,70.045184,60.859441,59.516501,71.667596,86.740825,98.336474,104.341144,104.093287,97.587559,85.480627,70.488800,56.564358,47.386454,56.637950,91.593555,112.386841,111.393398,87.506773} },
		{ {50.486527,63.409837,69.352231,69.019084,60.342866,50.279209,40.623896,30.626204,31.369554,40.533283,43.897277,38.230196,23.219868,9.947927,14.267603,20.268351,25.386810,29.051251,31.098685,31.469423,30.140472,27.108869,22.395387,16.088652,8.546886,27.487437,61.533720,72.697228,60.831257} },
		{ {} },
		{},
		{ {43.441909,58.669031,66.411108,71.385438,83.641583,79.398875,52.763157,21.615756,40.987258,52.649410,42.242421,15.073904,19.158961,29.407978,34.560589,33.587834,26.295315,12.769285,4.207833,10.980831,17.070518,21.744130,24.917849,26.570261,26.693439,25.283775,22.339392,17.859221,11.842602} },
		{ {86.598887,78.347140,74.408310,73.568908,69.211680,57.652541,44.231602,43.172386,46.847870,43.832255,32.594771,25.597451,32.269315,36.054248,31.898137,20.621504,16.997289,22.046002,22.690070} },
		{ {72.942129,66.636213,62.974812,61.750535,60.935042,57.200952,49.164097,38.976078,35.006739,37.638419,39.187920,36.075356,28.171659,21.234233,24.358432,28.987042,29.927871,26.070199,18.119360,13.438176,16.856357,19.274035,18.320346} },
		{0},
		{0},
		{0},
	};
	const std::array<double, SCOPE_MAX> scope_multipliers = {
		1.0, //Silencer and muzzle brake stay the same
		0.8, //Silencer and muzzle brake stay the same
		1.2, //Silencer and muzzle brake stay the same
		7.2, //Silencer becomes 1.0, Muzzle brake becomes 0.8
		14.4 //Silencer becomes 1.0, Muzzle brake becomes 0.8
	};
	const std::array<std::pair<double, double>, BARREL_MAX> barrel_multipliers = {
		std::pair(1, 1),
		std::pair(1, 0.9),
		std::pair(0.5, 1),
	};

}



void r012401::init()
{

	static bool initialized = false;


	if (initialized)
	{
		return;
	}

	for (int weapon_index = 1; weapon_index < WEAPON_MAX; weapon_index++)
	{

		weapon_info* weapon = &weapons[weapon_index];

		weapon->rta = rt123589120[weapon_index];

		weapon->delay = weapon_delays[weapon_index];

		weapon->crouch_delay = crouch_delays[weapon_index];


		if (control_times.size() > weapon_index)
			weapon->control_time = control_times[weapon_index];
	}
	initialized = true;
	
}

void hmanze5910421(float& x_r3c01I_129421, float& y_r3c_129421)
{
	double range = 10.0 * 0.5;

	x_r3c01I_129421 = utils::random_float(x_r3c01I_129421 - range, x_r3c01I_129421 + range);
	y_r3c_129421 = utils::random_float(y_r3c_129421 - range, y_r3c_129421 + range);
}


bool r012401::r_chks5891m()
{
	bool	is_firing		= utils::key_down(g_settings.attack_key),
			is_scoped		= utils::key_down(g_settings.scope_key),
			is_crouched		= utils::key_down(g_settings.crouch_key),
			should_recoil	= ((g_settings.enabled && is_firing && is_scoped) || (g_settings.enabled && g_settings.hipfire && is_firing));
	
	return should_recoil;

}


bool check_mouse() {

	CURSORINFO info;
	info.cbSize = sizeof(CURSORINFO);
	GetCursorInfo(&info);

	// if mouse is enabled we cant be firing (in a menu)
	if (info.flags) {

		return false;
	}

}

bool correct_window(std::string name) {

	char wnd_title[256];
	HWND hwnd = GetForegroundWindow(); // get handle of currently active window
	GetWindowTextA(hwnd, wnd_title, sizeof(wnd_title));
	std::string wnd(wnd_title);

	if (wnd.find(name) != std::string::npos)

		return true;
	return false;

}

double r_st4n10529(double div) {

	float x;
	/*float sens = g_settings.sensitivity;
	float ads_sensitivity = (g_settings.sensitivity * g_settings.ads_sens);*/

	if (g_settings.ads_sens != 1 && GetAsyncKeyState(g_settings.scope_key)) { // if ads sens isnt 1 and you're scoping
		return x = div / (-0.03f * (g_settings.ads_sens * 3.0) * (g_settings.fov / 100.0));
	}
	else {
		return x = div / (-0.03f * (g_settings.sensitivity * 3.0) * (g_settings.fov / 100.0));
	}

}

double r_cr0ch1204(double div) {

	float x;
	//float sens = g_settings.sensitivity;
	//float ads_sensitivity = (g_settings.sensitivity * g_settings.ads_sens);

	if (g_settings.ads_sens != 1 && GetAsyncKeyState(g_settings.scope_key)) { // if ads sens isnt 1 and you're scoping
		return x = div / (-0.03f * (g_settings.ads_sens * 3.0) * 2 * (g_settings.fov / 100.0));
	}
	else {
		return x = div / (-0.03f * (g_settings.sensitivity * 3.0) * 2 * (g_settings.fov / 100.0));
	}

}

bool movement_check() {
	const bool forward	= (LI_FN(GetAsyncKeyState)(0x57) & 0x8000);
	const bool back		= (LI_FN(GetAsyncKeyState)(0x53) & 0x8000);
	const bool left		= (LI_FN(GetAsyncKeyState)(0x41) & 0x8000);
	const bool right	= (LI_FN(GetAsyncKeyState)(0x44) & 0x8000);

	return ((forward || back || left || right) && !(forward && back && !(left || right)) && !(left && right && !(forward || back)));
}

void r012401::doo2135()
{
	if (g_settings.weapon == WEAPON_NONE)
		return;

	init();



	weapon_info current_weapon = weapons[g_settings.weapon];

	float current_scope_multiplier						= scope_multipliers[g_settings.scope];
	float current_hipfire_multiplier					= weapon_hipfire[g_settings.weapon];
	float current_delay_multiplier						= updated_delays[g_settings.weapon];
	float current_movement_multiplier					= movement_standing_multipliers[g_settings.weapon];
	float current_movement_hipfire_multiplier			= movement_hipfire_standing_multipliers[g_settings.weapon];
	float current_crouch_multiplier						= crouch_multipliers[g_settings.weapon];
	float current_movement_crouch_multiplier			= movement_crouch_multipliers[g_settings.weapon];
	float current_movement_crouch_hipfire_multiplier	= movement_hipfire_crouch_multipliers[g_settings.weapon];
	int current_autofire_delay;

	float r_xxxx2161;
	float r_yy2415;

	switch (g_settings.weapon)
	{
	case WEAPON_THOMPSON:
		if (g_settings.scope == SCOPE_HOLOSIGHT)
			current_scope_multiplier = 1.4;
		break;
	case WEAPON_CUSTOM:
		if (g_settings.scope == SCOPE_HOLOSIGHT)
			current_scope_multiplier = 1.6;
		break;
	case WEAPON_M249:
		if (g_settings.scope == SCOPE_8X)
			current_scope_multiplier = 7.1;
		break;
	case WEAPON_AK:
		if (g_settings.scope == SCOPE_HOLOSIGHT)
			current_scope_multiplier = 1.215;
		break;
	default:
		break;
	}

	std::pair<double, double> current_barrel_multiplier = barrel_multipliers[g_settings.barrel];

	int current_weapon_table_size = current_weapon.rta.size();

	for (int bullets_shot = 0; bullets_shot < current_weapon_table_size; bullets_shot++)
	{

		bool is_crouched = utils::key_down(0x11);

		if (!r_chks5891m())
			break;


		double barrel_scaling = current_barrel_multiplier.first;

		if (g_settings.scope == SCOPE_8X || g_settings.scope == SCOPE_16X)
			if (g_settings.barrel == BARREL_MUZZLE_BRAKE)
				barrel_scaling = 0.8;


		const double hipfire_x = ((current_weapon.rta[bullets_shot][0] * 15) / 5029) * (1 * barrel_scaling);
		const double hipfire_y = ((current_weapon.rta[bullets_shot][1] * 15) / 5029) * (1 * barrel_scaling);

		const double table_x = (((current_weapon.rta[bullets_shot][0] * 15) / 5029) * (current_scope_multiplier * barrel_scaling));
		const double table_y = (((current_weapon.rta[bullets_shot][1] * 15) / 5029) * (current_scope_multiplier * barrel_scaling));


		double weapon_delay = is_crouched ? current_weapon.crouch_delay + current_weapon.delay : current_weapon.delay;
		weapon_delay *= current_barrel_multiplier.second;

		bool movement = movement_check();



		//crouch check
		if (is_crouched) {
			r_xxxx2161 = r_cr0ch1204(table_x);
			r_yy2415 = r_cr0ch1204(table_y);

		}
		else {
			r_xxxx2161 = r_st4n10529(table_x);
			r_yy2415 = r_st4n10529(table_y);
		}


		if (movement && (!is_crouched)) {
			r_xxxx2161 = r_st4n10529(table_x) * current_movement_multiplier;
			r_yy2415 = r_st4n10529(table_y) * current_movement_multiplier;
		}
		else if (movement && (is_crouched)) {

			r_xxxx2161 = r_cr0ch1204(table_x) * current_movement_crouch_multiplier;
			r_yy2415 = r_cr0ch1204(table_y) * current_movement_crouch_multiplier;
		}

		else {
			if (!is_crouched) {
				r_xxxx2161 = r_st4n10529(table_x);
				r_yy2415 = r_st4n10529(table_y);
			}
			else if (is_crouched) {
				r_xxxx2161 = r_cr0ch1204(table_x);
				r_yy2415 = r_cr0ch1204(table_y);
			}
		}


		if (g_settings.hipfire && !GetAsyncKeyState(g_settings.scope_key)) { // hipfire
			if (!is_crouched) {
				r_xxxx2161 = r_st4n10529(hipfire_x) * current_hipfire_multiplier;
				r_yy2415 = r_st4n10529(hipfire_y) * current_hipfire_multiplier;

			}
			else if (is_crouched) {
				r_xxxx2161 = r_cr0ch1204(hipfire_x) * current_hipfire_multiplier;
				r_yy2415 = r_cr0ch1204(hipfire_y) * current_hipfire_multiplier;
			}
		}

		if (utils::correct("Rust") && !utils::check()) {

			if (g_settings.autofire)
				if (g_settings.weapon == WEAPON_SEMI || g_settings.weapon == WEAPON_M92 || g_settings.weapon == WEAPON_PYTHON)
				{
					SendMessageW(GetForegroundWindow(), WM_LBUTTONDOWN, MK_LBUTTON, MAKELPARAM(0, 0));
					Sleep(10);
					SendMessageW(GetForegroundWindow(), WM_LBUTTONUP, MK_LBUTTON, MAKELPARAM(0, 0));
					Sleep(10);
				}

			if (g_settings.humanization)
			{
				hmanze5910421(r_xxxx2161, r_yy2415);
				utils::relative_mouse_move(weapon_delay, weapon_delay, r_xxxx2161, r_yy2415);
			}
			else if (g_settings.smoothing)
			{
				utils::relative_mouse_move(weapon_delay, g_settings.smoothness, r_xxxx2161, r_yy2415);
			}

			else
			{
				utils::relative_mouse_move(weapon_delay, current_delay_multiplier, r_xxxx2161, r_yy2415);
			}
		}
		
	}
		
}


	






